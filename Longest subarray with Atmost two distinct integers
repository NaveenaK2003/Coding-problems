Brute Force:



class Solution {
    public int totalElements(int[] arr) {
        // code here
        int max = 0;
        int n = arr.length;
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                HashSet<Integer> set = new HashSet<>();
                for(int k = i; k <= j; k++){
                    set.add(arr[k]);
                    if(set.size() > 2){
                        break;
                    }
                }
                if(set.size() <= 2)
                 max = Math.max(max, j - i + 1);
            }
           
        }
        return max;
    }
}






Using Two Pointer and sliding window:


class Solution {
    public int totalElements(int[] arr) {
        // code here
        Map<Integer, Integer> map = new HashMap<>();
        int n = arr.length;
        int j = 0;
        int max = 0;
        for(int i = 0; i < n; i++){
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            
            while(map.size() > 2){
                map.put(arr[j], map.get(arr[j]) - 1);
                
                if(map.get(arr[j]) == 0){
                    map.remove(arr[j]);
                }
                j++;
            }
           
            max = Math.max(max, i - j + 1);
        }
        return max;
    }
}
