Brute Force:

class Solution {
    int maxProduct(int[] arr) {
        // code here
        int mul = 1;
        int n = arr.length;
        int max = arr[0];
        for(int i = 0; i < n; i++){
            mul = 1;
            for(int j = i; j < n; j++){
                mul *= arr[j];
                max = Math.max(max, mul);
            }
        }
        return max;
    }
}


Min and Max Product Ending Method:


class Solution {
    int max(int a, int b, int c){
        return Math.max(a, Math.max(b, c));
    }

    int min(int a, int b, int c){
        return Math.min(a, Math.min(b, c));
    }

    public int maxProduct(int[] arr) {
        int n = arr.length;
        int currMin = arr[0];
        int currMax = arr[0];
        int maxProduct = arr[0];
        for(int i = 1; i < n; i++){
            int temp = max(arr[i], arr[i] * currMax, arr[i] * currMin);
            currMin = min(arr[i], arr[i] * currMax, arr[i] * currMin);
            currMax = temp;
            maxProduct = Math.max(maxProduct, currMax);
        }
        return maxProduct;
    }
}

By Traversing in Both Directions:


class Solution {
    int maxProduct(int[] arr) {
        // code here
        int n = arr.length;
        int leftToRight = 1;
        int rightToLeft = 1;
        int max = Integer.MIN_VALUE;
        
        for(int i = 0; i < n; i++){
            if(leftToRight == 0){
                leftToRight = 1;
            }
            
            if(rightToLeft == 0){
                rightToLeft = 1;
            }
            
            leftToRight *= arr[i];
            
            int right = n - i - 1;
            rightToLeft *= arr[right];

            max = Math.max(leftToRight, Math.max(rightToLeft, max));
        }
        return max;
    }
}
