Brute Force:

class Solution {
    public int longestKSubstr(String s, int k) {
        // code here
        int n = s.length();
        int max = -1;
        for(int i = 0; i < n; i++){
            Set<Character> set = new HashSet<>();
            for(int j = i; j < n; j++){
                set.add(s.charAt(j));
                if(set.size() == k){
                    max = Math.max(max, j - i + 1);
                }
            }
        }
        return max;
    }
}


Using Sliding Window:



class Solution {
    public int longestKSubstr(String s, int k) {
        // code here
        int n = s.length();
        int max = -1;
        int[] freq =new int[26];
        int j = 0;
        int count = 0;
        int i  = 0;
        while(j < n){
            freq[s.charAt(j) - 'a']++;
            if(freq[s.charAt(j) - 'a'] == 1)
            count++;
            while(count > k){
                freq[s.charAt(i) - 'a']--;
                
                if(freq[s.charAt(i) - 'a'] == 0)
                count--;
                i++;
            }
            if(count == k){
                max = Math.max(max, j - i + 1);
            }
            j++;
        }
        return max;
    }
}
